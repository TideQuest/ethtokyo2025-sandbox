"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tls_1 = require("@reclaimprotocol/tls");
const server_1 = require("../server");
const utils_1 = require("../utils");
const DEMO_GEO_LOCATIONS = ['in', 'us'];
jest.setTimeout(15000);
describe.skip('TCP Tunnel', () => {
    it.each([...DEMO_GEO_LOCATIONS, 'none'])('should generate a session using a geoLocation (%s)', async (geoLocation) => {
        const resParser = (0, utils_1.makeHttpResponseParser)();
        let resolvePromise;
        let rejectPromise;
        const session = await (0, server_1.makeTcpTunnel)({
            host: 'lumtest.com',
            port: 80,
            geoLocation: geoLocation === 'none' ? '' : geoLocation,
            logger: utils_1.logger,
            onClose(err) {
                rejectPromise === null || rejectPromise === void 0 ? void 0 : rejectPromise(err || new Error('session closed'));
            },
            onMessage(data) {
                resParser.onChunk(data);
                if (resParser.res.complete) {
                    resolvePromise === null || resolvePromise === void 0 ? void 0 : resolvePromise();
                }
            },
        });
        const waitForRes = new Promise((resolve, reject) => {
            resolvePromise = resolve;
            rejectPromise = reject;
        });
        const str = 'GET /myip.json HTTP/1.1\r\nHost: lumtest.com\r\n\r\n';
        await session.write((0, tls_1.strToUint8Array)(str));
        await waitForRes;
        await session.close();
        expect(resParser.res.statusCode).toBe(200);
        const resBody = (0, tls_1.uint8ArrayToStr)(resParser.res.body);
        const resJson = JSON.parse(resBody);
        if (geoLocation === 'none') {
            return;
        }
        expect(resJson.country).toBe(geoLocation.toUpperCase());
    });
    it('should gracefully fail an invalid geoLocation', async () => {
        await expect((0, server_1.makeTcpTunnel)({
            host: 'lumtest.com',
            port: 80,
            geoLocation: 'xz',
            logger: utils_1.logger,
        })).rejects.toMatchObject({
            message: /failed with status code: 400/
        });
    });
    it('should connect to restricted server', async () => {
        const session = await (0, server_1.makeTcpTunnel)({
            host: 'servicos.acesso.gov.br',
            port: 80,
            geoLocation: 'US',
            logger: utils_1.logger,
        });
        await session.close();
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC50Y3AtdHVubmVsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3Rlc3RzL3Rlc3QudGNwLXR1bm5lbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDhDQUF1RTtBQUN2RSx1Q0FBMEM7QUFDMUMscUNBQTBEO0FBRTFELE1BQU0sa0JBQWtCLEdBQUcsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUE7QUFFdkMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFNLENBQUMsQ0FBQTtBQUV2QixRQUFRLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxHQUFHLEVBQUU7SUFFaEMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsa0JBQWtCLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxvREFBb0QsRUFBRSxLQUFLLEVBQUMsV0FBVyxFQUFFLEVBQUU7UUFDbkgsTUFBTSxTQUFTLEdBQUcsSUFBQSw4QkFBc0IsR0FBRSxDQUFBO1FBRTFDLElBQUksY0FBd0MsQ0FBQTtRQUM1QyxJQUFJLGFBQWlELENBQUE7UUFFckQsTUFBTSxPQUFPLEdBQUcsTUFBTSxJQUFBLHNCQUFhLEVBQUM7WUFDbkMsSUFBSSxFQUFFLGFBQWE7WUFDbkIsSUFBSSxFQUFFLEVBQUU7WUFDUixXQUFXLEVBQUUsV0FBVyxLQUFLLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxXQUFXO1lBQ3RELE1BQU0sRUFBTixjQUFNO1lBQ04sT0FBTyxDQUFDLEdBQUc7Z0JBQ1YsYUFBYSxhQUFiLGFBQWEsdUJBQWIsYUFBYSxDQUFHLEdBQUcsSUFBSSxJQUFJLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUE7WUFDcEQsQ0FBQztZQUNELFNBQVMsQ0FBQyxJQUFJO2dCQUNiLFNBQVMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUE7Z0JBQ3ZCLElBQUcsU0FBUyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQztvQkFDM0IsY0FBYyxhQUFkLGNBQWMsdUJBQWQsY0FBYyxFQUFJLENBQUE7Z0JBQ25CLENBQUM7WUFDRixDQUFDO1NBQ0QsQ0FBQyxDQUFBO1FBRUYsTUFBTSxVQUFVLEdBQUcsSUFBSSxPQUFPLENBQU8sQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLEVBQUU7WUFDeEQsY0FBYyxHQUFHLE9BQU8sQ0FBQTtZQUN4QixhQUFhLEdBQUcsTUFBTSxDQUFBO1FBQ3ZCLENBQUMsQ0FBQyxDQUFBO1FBRUYsTUFBTSxHQUFHLEdBQUcsc0RBQXNELENBQUE7UUFDbEUsTUFBTSxPQUFPLENBQUMsS0FBSyxDQUFDLElBQUEscUJBQWUsRUFBQyxHQUFHLENBQUMsQ0FBQyxDQUFBO1FBQ3pDLE1BQU0sVUFBVSxDQUFBO1FBRWhCLE1BQU0sT0FBTyxDQUFDLEtBQUssRUFBRSxDQUFBO1FBQ3JCLE1BQU0sQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQTtRQUMxQyxNQUFNLE9BQU8sR0FBRyxJQUFBLHFCQUFlLEVBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQTtRQUNuRCxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFBO1FBRW5DLElBQUcsV0FBVyxLQUFLLE1BQU0sRUFBRSxDQUFDO1lBQzNCLE9BQU07UUFDUCxDQUFDO1FBRUQsTUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQzNCLFdBQVcsQ0FBQyxXQUFXLEVBQUUsQ0FDekIsQ0FBQTtJQUNGLENBQUMsQ0FBQyxDQUFBO0lBRUYsRUFBRSxDQUFDLCtDQUErQyxFQUFFLEtBQUssSUFBRyxFQUFFO1FBQzdELE1BQU0sTUFBTSxDQUNYLElBQUEsc0JBQWEsRUFBQztZQUNiLElBQUksRUFBRSxhQUFhO1lBQ25CLElBQUksRUFBRSxFQUFFO1lBQ1IsV0FBVyxFQUFFLElBQUk7WUFDakIsTUFBTSxFQUFOLGNBQU07U0FDTixDQUFDLENBQ0YsQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDO1lBQ3ZCLE9BQU8sRUFBRSw4QkFBOEI7U0FDdkMsQ0FBQyxDQUFBO0lBQ0gsQ0FBQyxDQUFDLENBQUE7SUFFRixFQUFFLENBQUMscUNBQXFDLEVBQUUsS0FBSyxJQUFHLEVBQUU7UUFDbkQsTUFBTSxPQUFPLEdBQUcsTUFBTSxJQUFBLHNCQUFhLEVBQUM7WUFDbkMsSUFBSSxFQUFFLHdCQUF3QjtZQUM5QixJQUFJLEVBQUUsRUFBRTtZQUNSLFdBQVcsRUFBRSxJQUFJO1lBQ2pCLE1BQU0sRUFBTixjQUFNO1NBQ04sQ0FBQyxDQUFBO1FBRUYsTUFBTSxPQUFPLENBQUMsS0FBSyxFQUFFLENBQUE7SUFDdEIsQ0FBQyxDQUFDLENBQUE7QUFDSCxDQUFDLENBQUMsQ0FBQSJ9