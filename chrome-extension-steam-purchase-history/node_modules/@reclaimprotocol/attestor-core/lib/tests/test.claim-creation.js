"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tls_1 = require("@reclaimprotocol/tls");
const client_1 = require("../client");
const providers_1 = require("../providers");
const server_1 = require("../server");
const describe_with_server_1 = require("../tests/describe-with-server");
const mocks_1 = require("../tests/mocks");
const utils_1 = require("../tests/utils");
const utils_2 = require("../utils");
const TLS_VERSIONS = [
    'TLS1_3',
    'TLS1_2',
];
const OPRF_CIPHER_SUITES = [
    'TLS_CHACHA20_POLY1305_SHA256',
    'TLS_AES_256_GCM_SHA384',
    'TLS_AES_128_GCM_SHA256',
];
jest.setTimeout(90000);
jest.mock('@reclaimprotocol/tls/lib/utils/parse-certificate', () => {
    const actual = jest.requireActual('@reclaimprotocol/tls/lib/utils/parse-certificate');
    return {
        __esModule: true,
        ...actual,
        verifyCertificateChain: jest.fn().mockImplementation()
    };
});
(0, describe_with_server_1.describeWithServer)('Claim Creation', opts => {
    const zkEngine = 'gnark';
    let client;
    let claimUrl;
    beforeEach(() => {
        client = opts.client;
        claimUrl = `https://localhost:${opts.mockhttpsServerPort}/me`;
        // we need to disable certificate verification
        // for testing purposes
        providers_1.providers.http.additionalClientOptions = {
            verifyServerCertificate: false
        };
    });
    it.each(TLS_VERSIONS)('should successfully create a claim (%s)', async (version) => {
        var _a, _b, _c;
        providers_1.providers.http.additionalClientOptions = {
            ...providers_1.providers.http.additionalClientOptions,
            supportedProtocolVersions: [version]
        };
        const user = 'adhiraj';
        const result = await (0, client_1.createClaimOnAttestor)({
            name: 'http',
            params: {
                url: claimUrl,
                method: 'GET',
                responseRedactions: [],
                responseMatches: [
                    {
                        type: 'contains',
                        value: `${user}@mock.com`
                    }
                ]
            },
            secretParams: {
                authorisationHeader: `Bearer ${user}`
            },
            ownerPrivateKey: opts.privateKeyHex,
            client,
            zkEngine,
        });
        expect(result.error).toBeUndefined();
        expect((_a = result.request) === null || _a === void 0 ? void 0 : _a.transcript).toBeTruthy();
        // decrypt the transcript and check we didn't accidentally
        // leak our secrets in the application data
        const transcript = result.request.transcript;
        const applMsgs = (0, utils_2.extractApplicationDataFromTranscript)(await (0, server_1.decryptTranscript)(transcript, utils_2.logger, zkEngine, (_b = result.request) === null || _b === void 0 ? void 0 : _b.fixedServerIV, (_c = result.request) === null || _c === void 0 ? void 0 : _c.fixedClientIV));
        const requestData = applMsgs
            .filter(m => m.sender === 'client')
            .map(m => (0, tls_1.uint8ArrayToStr)(m.message))
            .join('');
        // ensure the secret authorisation header is not leaked
        expect(requestData).not.toContain(user);
        await expect((0, utils_2.assertValidClaimSignatures)(result, client.metadata)).resolves.toBeUndefined();
        expect(mocks_1.SPY_PREPARER).toHaveBeenCalledTimes(1);
        // check all direct message reveals and
        // ensure we've not accidentally re-used a key
        // for multiple application data messages that
        // were not meant to be revealed.
        await (0, utils_1.verifyNoDirectRevealLeaks)();
    });
    it('should not create a claim with invalid response', async () => {
        await expect(async () => {
            await (0, client_1.createClaimOnAttestor)({
                name: 'http',
                params: {
                    url: claimUrl,
                    method: 'GET',
                    responseRedactions: [],
                    responseMatches: [
                        {
                            type: 'contains',
                            value: 'something@mock.com'
                        }
                    ]
                },
                secretParams: {
                    authorisationHeader: 'Fail'
                },
                ownerPrivateKey: opts.privateKeyHex,
                client,
                zkEngine,
            });
        }).rejects.toThrow('Provider returned error 401');
    });
    describe('OPRF via %s', () => {
        const zkEngine = 'gnark';
        it.each(OPRF_CIPHER_SUITES)('should create a claim with an OPRF redaction (%s)', async (cipherSuite) => {
            var _a, _b;
            // OPRF is only available on gnark & chacha20 right now
            providers_1.providers.http.additionalClientOptions = {
                ...providers_1.providers.http.additionalClientOptions,
                cipherSuites: [cipherSuite]
            };
            const user = '(?<test>adhiraj)';
            const result = await (0, client_1.createClaimOnAttestor)({
                name: 'http',
                params: {
                    url: claimUrl,
                    method: 'GET',
                    responseRedactions: [
                        {
                            regex: user,
                            hash: 'oprf'
                        }
                    ],
                    responseMatches: [
                        {
                            type: 'contains',
                            value: ''
                        }
                    ]
                },
                secretParams: {
                    authorisationHeader: `Bearer ${user}`
                },
                ownerPrivateKey: opts.privateKeyHex,
                client,
                zkEngine,
            });
            expect(result.error).toBeUndefined();
            // decrypt the transcript and check we didn't accidentally
            // leak our secrets in the application data
            const transcript = result.request.transcript;
            expect(transcript).toBeTruthy();
            const applMsgs = (0, utils_2.extractApplicationDataFromTranscript)(await (0, server_1.decryptTranscript)(transcript, utils_2.logger, zkEngine, (_a = result.request) === null || _a === void 0 ? void 0 : _a.fixedServerIV, (_b = result.request) === null || _b === void 0 ? void 0 : _b.fixedClientIV));
            const serverPackets = applMsgs
                .filter(m => m.sender === 'server')
                .map(m => (0, tls_1.uint8ArrayToStr)(m.message))
                .join('');
            const toprf = (0, utils_1.getFirstTOprfBlock)(result.request);
            expect(toprf).toBeTruthy();
            // only the user's hash should be revealed
            expect(serverPackets).not.toContain(user);
            expect(serverPackets).toContain((0, utils_2.binaryHashToStr)(toprf.nullifier, toprf.dataLocation.length));
        });
        it('should produce the same hash for the same input', async () => {
            let hash;
            for (let i = 0; i < 2; i++) {
                const user = '(?<su>some-user)';
                const result = await (0, client_1.createClaimOnAttestor)({
                    name: 'http',
                    params: {
                        url: claimUrl,
                        method: 'GET',
                        responseRedactions: [
                            {
                                regex: user,
                                hash: 'oprf'
                            }
                        ],
                        responseMatches: [
                            {
                                type: 'contains',
                                value: ''
                            }
                        ]
                    },
                    secretParams: {
                        authorisationHeader: `Bearer ${user}`
                    },
                    ownerPrivateKey: opts.privateKeyHex,
                    client,
                    zkEngine,
                });
                const toprf = (0, utils_1.getFirstTOprfBlock)(result.request);
                expect(toprf).toBeTruthy();
                hash || (hash = toprf.nullifier);
                expect(toprf.nullifier).toEqual(hash);
            }
        });
    });
    describe('Pool', () => {
        it('should correctly throw error when tunnel creation fails', async () => {
            await expect((0, client_1.createClaimOnAttestor)({
                name: 'http',
                params: {
                    url: 'https://some.dns.not.exist',
                    method: 'GET',
                    responseRedactions: [],
                    responseMatches: [
                        {
                            type: 'contains',
                            value: 'test'
                        }
                    ]
                },
                secretParams: {
                    authorisationHeader: 'Bearer abcd'
                },
                ownerPrivateKey: opts.privateKeyHex,
                client: { url: opts.serverUrl },
                zkEngine
            })).rejects.toMatchObject({
                message: /ENOTFOUND/
            });
        });
        it('should reconnect client when found disconnected', async () => {
            await createClaim();
            // since we're using a pool, we'll find the client
            // disconnected and when we create the claim again
            // we expect a new connection to be established
            const client = (0, client_1.getAttestorClientFromPool)(opts.serverUrl);
            await client.terminateConnection();
            // ensure claim is still successful
            const result2 = await createClaim();
            expect(result2.claim).toBeTruthy();
            const client2 = (0, client_1.getAttestorClientFromPool)(opts.serverUrl);
            expect(client2).not.toBe(client);
        });
        it('should retry on network errors', async () => {
            const client = (0, client_1.getAttestorClientFromPool)(opts.serverUrl);
            client.sendMessage = async () => {
                // @ts-ignore
                client.sendMessage = () => { };
                const err = new utils_2.AttestorError('ERROR_NETWORK_ERROR', 'F');
                await client.terminateConnection(err);
                throw err;
            };
            // first the client will mock disconnection when
            // sending a message -- that should trigger a retry
            // and result in a successful claim creation
            await expect(createClaim()).resolves.toBeTruthy();
            // ensure new client is created to replace
            // the disconnected one
            const client2 = (0, client_1.getAttestorClientFromPool)(opts.serverUrl);
            expect(client2).not.toBe(client);
        });
    });
    function createClaim() {
        const user = 'testing-123';
        return (0, client_1.createClaimOnAttestor)({
            name: 'http',
            params: {
                url: claimUrl,
                method: 'GET',
                responseRedactions: [],
                responseMatches: [
                    {
                        type: 'contains',
                        value: `${user}@mock.com`
                    }
                ]
            },
            secretParams: {
                authorisationHeader: `Bearer ${user}`
            },
            ownerPrivateKey: opts.privateKeyHex,
            client: { url: opts.serverUrl }
        });
    }
});
//# sourceMappingURL=data:application/json;base64,