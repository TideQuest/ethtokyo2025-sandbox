"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const client_1 = require("../client");
const describe_with_server_1 = require("../tests/describe-with-server");
const utils_1 = require("../tests/utils");
const utils_2 = require("../utils");
jest.setTimeout(300000);
(0, describe_with_server_1.describeWithServer)('HTTP Provider', opts => {
    afterEach(async () => {
        await (0, utils_1.verifyNoDirectRevealLeaks)();
    });
    it('should create claim with template params', async () => {
        var _a;
        const resp = await (0, client_1.createClaimOnAttestor)({
            name: 'http',
            params: {
                url: 'https://news.ycombinator.{{param1}}/{{param6}}?token={{param4}}&token1={{param5}}',
                method: 'GET',
                responseMatches: [{
                        type: 'regex',
                        value: '<title.*?(?<domain>{{param2}})<\\/title>',
                    }],
                responseRedactions: [{
                        xPath: './html/head/{{param3}}',
                    }],
                paramValues: {
                    param1: 'com',
                    param2: 'Top Links | Hacker News',
                    param3: 'title',
                }
            },
            secretParams: {
                cookieStr: '<cookie-str>',
                paramValues: {
                    param4: 'quhrfqiuherfqlireufh',
                    param5: 'sssbbbbr123',
                    param6: 'best',
                }
            },
            ownerPrivateKey: opts.privateKeyHex,
            client: opts.client,
            zkEngine: 'gnark'
        });
        expect(resp.error).toBeUndefined();
        expect((_a = resp.claim) === null || _a === void 0 ? void 0 : _a.context)
            .toContain('0x5e3e976476ded7b58120d606b33b75be52adb8345a7979c181764f00763e7b2a');
    });
    it('should create claim with OPRF template params', async () => {
        const resp = await (0, client_1.createClaimOnAttestor)({
            name: 'http',
            params: {
                url: 'https://example.com/',
                method: 'GET',
                responseMatches: [
                    {
                        type: 'contains',
                        value: '<title>{{domain}}</title>',
                    }
                ],
                responseRedactions: [
                    {
                        xPath: '/html/head/title',
                        regex: '<title>(?<domain>.*?)<\\/title>',
                        hash: 'oprf'
                    }
                ],
                paramValues: { domain: 'Example Domain' }
            },
            secretParams: {
                cookieStr: '<cookie-str>'
            },
            ownerPrivateKey: opts.privateKeyHex,
            client: opts.client,
            zkEngine: 'gnark',
        });
        expect(resp.error).toBeUndefined();
        const ctx = JSON.parse(resp.claim.context);
        const domainStr = ctx.extractedParameters.domain;
        const toprf = (0, utils_1.getFirstTOprfBlock)(resp.request);
        expect(toprf).toBeTruthy();
        const toprfStr = (0, utils_2.binaryHashToStr)(toprf.nullifier, toprf.dataLocation.length);
        expect(domainStr).toEqual(toprfStr.slice(0, domainStr.length));
    });
    it('should create claim with non 200 response', async () => {
        var _a;
        const resp = await (0, client_1.createClaimOnAttestor)({
            name: 'http',
            params: {
                url: 'https://httpstat.us/201',
                method: 'GET',
                responseMatches: [{
                        type: 'contains',
                        value: 'Created',
                    }],
                responseRedactions: [{
                        jsonPath: '$.description',
                    }],
                headers: {
                    accept: 'application/json, text/plain, */*'
                }
            },
            secretParams: {
                cookieStr: '<cookie-str>'
            },
            ownerPrivateKey: opts.privateKeyHex,
            client: opts.client,
            zkEngine: 'gnark'
        });
        expect(resp.error).toBeUndefined();
        expect((_a = resp.claim) === null || _a === void 0 ? void 0 : _a.context)
            .toContain('0xd18ff964dfce6a3074791ec6a6c358f7f122c838b01c3e0565b33eac29515bc6');
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC5odHRwLXByb3ZpZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3Rlc3RzL3Rlc3QuaHR0cC1wcm92aWRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHVDQUFrRDtBQUNsRCx5RUFBbUU7QUFDbkUsMkNBQStFO0FBQy9FLHFDQUEyQztBQUUzQyxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU8sQ0FBQyxDQUFBO0FBRXhCLElBQUEseUNBQWtCLEVBQUMsZUFBZSxFQUFFLElBQUksQ0FBQyxFQUFFO0lBRTFDLFNBQVMsQ0FBQyxLQUFLLElBQUcsRUFBRTtRQUNuQixNQUFNLElBQUEsaUNBQXlCLEdBQUUsQ0FBQTtJQUNsQyxDQUFDLENBQUMsQ0FBQTtJQUVGLEVBQUUsQ0FBQywwQ0FBMEMsRUFBRSxLQUFLLElBQUcsRUFBRTs7UUFDeEQsTUFBTSxJQUFJLEdBQUcsTUFBTSxJQUFBLDhCQUFxQixFQUFDO1lBQ3hDLElBQUksRUFBRSxNQUFNO1lBQ1osTUFBTSxFQUFFO2dCQUNQLEdBQUcsRUFBRSxtRkFBbUY7Z0JBQ3hGLE1BQU0sRUFBRSxLQUFLO2dCQUNiLGVBQWUsRUFBRSxDQUFDO3dCQUNqQixJQUFJLEVBQUUsT0FBTzt3QkFDYixLQUFLLEVBQUUsMENBQTBDO3FCQUNqRCxDQUFDO2dCQUNGLGtCQUFrQixFQUFFLENBQUM7d0JBQ3BCLEtBQUssRUFBRSx3QkFBd0I7cUJBQy9CLENBQUM7Z0JBQ0YsV0FBVyxFQUFFO29CQUNaLE1BQU0sRUFBRSxLQUFLO29CQUNiLE1BQU0sRUFBRSx5QkFBeUI7b0JBQ2pDLE1BQU0sRUFBRSxPQUFPO2lCQUVmO2FBQ0Q7WUFDRCxZQUFZLEVBQUU7Z0JBQ2IsU0FBUyxFQUFFLGNBQWM7Z0JBQ3pCLFdBQVcsRUFBRTtvQkFDWixNQUFNLEVBQUUsc0JBQXNCO29CQUM5QixNQUFNLEVBQUUsYUFBYTtvQkFDckIsTUFBTSxFQUFFLE1BQU07aUJBQ2Q7YUFDRDtZQUNELGVBQWUs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