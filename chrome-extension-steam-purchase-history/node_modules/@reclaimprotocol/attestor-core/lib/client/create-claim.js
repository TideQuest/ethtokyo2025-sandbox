"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createClaimOnAttestor = createClaimOnAttestor;
const tls_1 = require("@reclaimprotocol/tls");
const make_rpc_tls_tunnel_1 = require("../client/tunnels/make-rpc-tls-tunnel");
const attestor_pool_1 = require("../client/utils/attestor-pool");
const config_1 = require("../config");
const api_1 = require("../proto/api");
const providers_1 = require("../providers");
const utils_1 = require("../utils");
const retries_1 = require("../utils/retries");
const signatures_1 = require("../utils/signatures");
const tls_2 = require("../utils/tls");
/**
 * Create a claim on the attestor
 */
function createClaimOnAttestor({ logger: _logger, maxRetries = 3, ...opts }) {
    const logger = _logger
        // if the client has already been initialised
        // and no logger is provided, use the client's logger
        // otherwise default to the global logger
        || ('logger' in opts.client ? opts.client.logger : utils_1.logger);
    return (0, retries_1.executeWithRetries)(attempt => (_createClaimOnAttestor({
        ...opts,
        logger: attempt
            ? logger.child({ attempt })
            : logger
    })), { maxRetries, logger, shouldRetry });
}
function shouldRetry(err) {
    var _a;
    if (err instanceof TypeError) {
        return false;
    }
    // possibly a network error, or the server
    // closed the connection before we received the full data
    if ((_a = err.message) === null || _a === void 0 ? void 0 : _a.includes('stream ended before')) {
        return true;
    }
    return err instanceof utils_1.AttestorError
        && err.code !== 'ERROR_INVALID_CLAIM'
        && err.code !== 'ERROR_BAD_REQUEST'
        && err.code !== 'ERROR_AUTHENTICATION_FAILED';
}
async function _createClaimOnAttestor({ name, params, secretParams, context, onStep, ownerPrivateKey, client: clientInit, logger = utils_1.logger, timestampS, updateProviderParams, updateParametersFromOprfData = true, ...zkOpts }) {
    const provider = providers_1.providers[name];
    const hostPort = (0, utils_1.getProviderValue)(params, provider.hostPort, secretParams);
    const geoLocation = (0, utils_1.getProviderValue)(params, provider.geoLocation, secretParams);
    const providerTlsOpts = (0, utils_1.getProviderValue)(params, provider.additionalClientOptions);
    const tlsOpts = { ...(0, tls_2.getDefaultTlsOptions)(), ...providerTlsOpts };
    const { zkEngine = 'snarkjs' } = zkOpts;
    let redactionMode = (0, utils_1.getProviderValue)(params, provider.writeRedactionMode);
    const [host, port] = hostPort.split(':');
    const resParser = (0, utils_1.makeHttpResponseParser)();
    let client;
    let lastMsgRevealed = false;
    const revealMap = new Map();
    onStep === null || onStep === void 0 ? void 0 : onStep({ name: 'connecting' });
    let endedHttpRequest;
    const createTunnelReq = {
        host,
        port: port ? +port : config_1.DEFAULT_HTTPS_PORT,
        geoLocation,
        id: (0, utils_1.generateTunnelId)()
    };
    logger = logger.child({ tunnelId: createTunnelReq.id });
    const authRequest = 'authRequest' in clientInit
        ? (typeof clientInit.authRequest === 'function'
            ? await clientInit.authRequest()
            : clientInit.authRequest)
        : undefined;
    const tunnel = await (0, make_rpc_tls_tunnel_1.makeRpcTlsTunnel)({
        tlsOpts,
        connect: (connectMsgs) => {
            let created = false;
            if ('metadata' in clientInit) {
                client = clientInit;
            }
            else {
                client = (0, attestor_pool_1.getAttestorClientFromPool)(clientInit.url, () => {
                    created = true;
                    return {
                        authRequest: authRequest,
                        initMessages: connectMsgs,
                        logger
                    };
                });
            }
            if (!created) {
                client
                    .waitForInit()
                    .then(() => client.sendMessage(...connectMsgs))
                    .catch(err => {
                    logger.error({ err }, 'error in sending init msgs');
                });
            }
            return client;
        },
        logger,
        request: createTunnelReq,
        onMessage(data) {
            logger.debug({ bytes: data.length }, 'recv data from server');
            resParser.onChunk(data);
            if (resParser.res.complete) {
                logger === null || logger === void 0 ? void 0 : logger.debug('got complete HTTP response from server');
                // wait a little bit to make sure the client has
                // finished writing the response
                setTimeout(() => {
                    endedHttpRequest === null || endedHttpRequest === void 0 ? void 0 : endedHttpRequest();
                }, 100);
            }
        },
        onClose(err) {
            const level = err ? 'error' : 'debug';
            logger === null || logger === void 0 ? void 0 : logger[level]({ err }, 'tls session ended');
            endedHttpRequest === null || endedHttpRequest === void 0 ? void 0 : endedHttpRequest(err);
            try {
                resParser.streamEnded();
            }
            catch (_a) { }
        },
    });
    const { version: tlsVersion, cipherSuite } = tunnel.tls.getMetadata();
    if (tlsVersion === 'TLS1_2' && redactionMode !== 'zk') {
        redactionMode = 'zk';
        logger.info('TLS1.2 detected, defaulting to zk redaction mode');
    }
    const { redactions, data: requestStr } = provider.createRequest(
    // @ts-ignore
    secretParams, params, logger);
    const requestData = typeof requestStr === 'string'
        ? (0, tls_1.strToUint8Array)(requestStr)
        : requestStr;
    logger.debug({ redactions: redactions.length }, 'generated request');
    const waitForAllData = new Promise((resolve, reject) => {
        endedHttpRequest = err => (err ? reject(err) : resolve());
    });
    onStep === null || onStep === void 0 ? void 0 : onStep({ name: 'sending-request-data' });
    try {
        if (redactionMode === 'zk') {
            await writeRedactedZk();
        }
        else {
            await writeRedactedWithKeyUpdate();
        }
        logger.info('wrote request to server');
    }
    catch (err) {
        // wait for complete stream end when the session is closed
        // mid-write, as this means the server could not process
        // our request due to some error. Hope the stream end
        // error will be more descriptive
        logger.error({ err }, 'session errored during write, waiting for stream end');
    }
    onStep === null || onStep === void 0 ? void 0 : onStep({ name: 'waiting-for-response' });
    await waitForAllData;
    await tunnel.close();
    logger.info('session closed, processing response');
    // update the response selections
    if (updateProviderParams) {
        const { params: updatedParms, secretParams: updatedSecretParms } = await updateProviderParams(tunnel.transcript, tlsVersion !== null && tlsVersion !== void 0 ? tlsVersion : 'TLS1_2');
        params = { ...params, ...updatedParms };
        secretParams = { ...secretParams, ...updatedSecretParms };
    }
    const signatureAlg = signatures_1.SIGNATURES[client.metadata.signatureType];
    let serverIV;
    let clientIV;
    const [serverBlock] = getLastBlocks('server', 1);
    if (serverBlock && serverBlock.message.type === 'ciphertext') {
        serverIV = serverBlock.message.fixedIv;
    }
    const [clientBlock] = getLastBlocks('client', 1);
    if (clientBlock && clientBlock.message.type === 'ciphertext') {
        clientIV = clientBlock.message.fixedIv;
    }
    const transcript = await generateTranscript();
    // now that we have the full transcript, we need
    // to generate the ZK proofs & send them to the attestor
    // to verify & sign our claim
    const claimTunnelReq = api_1.ClaimTunnelRequest.create({
        request: createTunnelReq,
        data: {
            provider: name,
            parameters: (0, utils_1.canonicalStringify)(params),
            context: (0, utils_1.canonicalStringify)(context),
            timestampS: timestampS !== null && timestampS !== void 0 ? timestampS : (0, utils_1.unixTimestampSeconds)(),
            owner: getAddress(),
        },
        transcript: transcript,
        zkEngine: zkEngine === 'gnark'
            ? api_1.ZKProofEngine.ZK_ENGINE_GNARK
            : api_1.ZKProofEngine.ZK_ENGINE_SNARKJS,
        fixedServerIV: serverIV,
        fixedClientIV: clientIV,
    });
    onStep === null || onStep === void 0 ? void 0 : onStep({ name: 'waiting-for-verification' });
    const claimTunnelBytes = api_1.ClaimTunnelRequest
        .encode(claimTunnelReq).finish();
    const requestSignature = await signatureAlg
        .sign(claimTunnelBytes, ownerPrivateKey);
    claimTunnelReq.signatures = { requestSignature };
    const result = await client.rpc('claimTunnel', claimTunnelReq);
    logger.info({ success: !!result.claim }, 'recv claim response');
    return result;
    async function writeRedactedWithKeyUpdate() {
        var _a;
        let currentIndex = 0;
        for (const section of redactions) {
            const block = requestData
                .slice(currentIndex, section.fromIndex);
            if (block.length) {
                await writeWithReveal(block, true);
            }
            const redacted = requestData
                .slice(section.fromIndex, section.toIndex);
            await writeWithReveal(redacted, false);
            currentIndex = section.toIndex;
        }
        // write if redactions were there
        const lastBlockStart = ((_a = redactions === null || redactions === void 0 ? void 0 : redactions[redactions.length - 1]) === null || _a === void 0 ? void 0 : _a.toIndex) || 0;
        const block = requestData.slice(lastBlockStart);
        if (block.length) {
            await writeWithReveal(block, true);
        }
    }
    async function writeRedactedZk() {
        let blocksWritten = tunnel.transcript.length;
        await tunnel.tls.write(requestData);
        blocksWritten = tunnel.transcript.length - blocksWritten;
        setRevealOfLastSentBlocks({
            type: 'zk',
            redactedPlaintext: (0, utils_1.redactSlices)(requestData, redactions)
        }, blocksWritten);
    }
    /**
     * Write data to the tunnel, with the option to mark the packet
     * as revealable to the attestor or not
     */
    async function writeWithReveal(data, reveal) {
        // if the reveal state has changed, update the traffic keys
        // to not accidentally reveal a packet not meant to be revealed
        // and vice versa
        if (reveal !== lastMsgRevealed) {
            await tunnel.tls.updateTrafficKeys();
        }
        let blocksWritten = tunnel.transcript.length;
        await tunnel.write(data);
        blocksWritten = tunnel.transcript.length - blocksWritten;
        // now we mark the packet to be revealed to the attestor
        setRevealOfLastSentBlocks(reveal ? { type: 'complete' } : undefined, blocksWritten);
        lastMsgRevealed = reveal;
    }
    function setRevealOfLastSentBlocks(reveal, nBlocks = 1) {
        const lastBlocks = getLastBlocks('client', nBlocks);
        if (!lastBlocks.length) {
            return;
        }
        for (const block of lastBlocks) {
            setRevealOfMessage(block.message, reveal);
        }
    }
    function getLastBlocks(sender, nBlocks) {
        // set the correct index for the server blocks
        const lastBlocks = [];
        for (let i = tunnel.transcript.length - 1; i >= 0; i--) {
            const block = tunnel.transcript[i];
            if (block.sender === sender) {
                lastBlocks.push(block);
                if (lastBlocks.length === nBlocks) {
                    break;
                }
            }
        }
        return lastBlocks;
    }
    /**
     * Generate transcript with reveal data for the attestor to verify
     */
    async function generateTranscript() {
        await addServerSideReveals();
        const startMs = Date.now();
        const revealedMessages = await (0, utils_1.preparePacketsForReveal)(tunnel.transcript, revealMap, {
            logger,
            cipherSuite: cipherSuite,
            onZkProgress(done, total) {
                const timeSinceStartMs = Date.now() - startMs;
                const timePerBlockMs = timeSinceStartMs / done;
                const timeLeftMs = timePerBlockMs * (total - done);
                onStep === null || onStep === void 0 ? void 0 : onStep({
                    name: 'generating-zk-proofs',
                    proofsDone: done,
                    proofsTotal: total,
                    approxTimeLeftS: Math.round(timeLeftMs / 1000),
                });
            },
            ...zkOpts,
        });
        return revealedMessages;
    }
    /**
     * Add reveals for server side blocks, using
     * the provider's redaction function if available.
     * Otherwise, opts to reveal all server side blocks.
     */
    async function addServerSideReveals() {
        const allPackets = tunnel.transcript;
        let serverPacketsToReveal = 'all';
        const packets = [];
        const serverBlocks = [];
        for (const b of allPackets) {
            if (b.message.type !== 'ciphertext'
                || !(0, utils_1.isApplicationData)(b.message, tlsVersion)) {
                continue;
            }
            const plaintext = tlsVersion === 'TLS1_3'
                ? b.message.plaintext.slice(0, -1)
                : b.message.plaintext;
            packets.push({
                message: plaintext,
                sender: b.sender
            });
            if (b.sender === 'server') {
                serverBlocks.push({
                    plaintext: plaintext,
                    message: b.message
                });
            }
        }
        if (provider.getResponseRedactions) {
            serverPacketsToReveal = await (0, utils_1.getBlocksToReveal)(serverBlocks, total => provider.getResponseRedactions({
                response: total,
                params,
                logger,
                ctx: config_1.PROVIDER_CTX
            }), performOprf);
        }
        const revealedPackets = packets
            .filter(p => p.sender === 'client');
        if (serverPacketsToReveal === 'all') {
            // reveal all server side blocks
            for (const { message, sender } of allPackets) {
                if (sender === 'server') {
                    setRevealOfMessage(message, { type: 'complete' });
                }
            }
            revealedPackets.push(...packets.filter(p => p.sender === 'server'));
        }
        else {
            for (const { block, redactedPlaintext, toprfs } of serverPacketsToReveal) {
                setRevealOfMessage(block.message, {
                    type: 'zk',
                    redactedPlaintext,
                    toprfs
                });
                revealedPackets.push({ sender: 'server', message: redactedPlaintext });
                if (updateParametersFromOprfData && toprfs) {
                    let strParams = (0, utils_1.canonicalStringify)(params);
                    for (const toprf of toprfs) {
                        strParams = strParams.replaceAll((0, utils_1.uint8ArrayToStr)(toprf.plaintext), (0, utils_1.binaryHashToStr)(toprf.nullifier, toprf.dataLocation.length));
                    }
                    params = JSON.parse(strParams);
                }
            }
        }
        await provider.assertValidProviderReceipt({
            receipt: revealedPackets,
            params: {
                ...params,
                // provide secret params for proper
                // request body validation
                secretParams,
            },
            logger,
            ctx: config_1.PROVIDER_CTX
        });
        // reveal all handshake blocks
        // so the attestor can verify there was no
        // hanky-panky
        for (const p of allPackets) {
            if (p.message.type !== 'ciphertext') {
                continue;
            }
            // break the moment we hit the first
            // application data packet
            if ((0, utils_1.isApplicationData)(p.message, tlsVersion)) {
                break;
            }
            setRevealOfMessage(p.message, { type: 'complete' });
        }
    }
    async function performOprf(plaintext) {
        var _a;
        logger.info({ length: plaintext.length }, 'generating OPRF...');
        const oprfOperator = ((_a = zkOpts.oprfOperators) === null || _a === void 0 ? void 0 : _a['chacha20'])
            || (0, utils_1.makeDefaultOPRFOperator)('chacha20', zkEngine, logger);
        const reqData = await oprfOperator.generateOPRFRequestData(plaintext, config_1.TOPRF_DOMAIN_SEPARATOR, logger);
        const res = await client.rpc('toprf', {
            maskedData: reqData.maskedData,
            engine: (0, utils_1.getEngineProto)(zkEngine)
        });
        const nullifier = await oprfOperator.finaliseOPRF(client.initResponse.toprfPublicKey, reqData, [res]);
        const data = {
            nullifier,
            responses: [res],
            mask: reqData.mask,
            dataLocation: undefined,
            plaintext
        };
        return data;
    }
    function setRevealOfMessage(message, reveal) {
        if (reveal) {
            revealMap.set(message, reveal);
            return;
        }
        revealMap.delete(message);
    }
    function getAddress() {
        const { getAddress, getPublicKey } = signatureAlg;
        const pubKey = getPublicKey(ownerPrivateKey);
        return getAddress(pubKey);
    }
}
//# sourceMappingURL=data:application/json;base64,