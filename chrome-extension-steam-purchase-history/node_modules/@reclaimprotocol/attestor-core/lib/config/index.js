"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BGP_WS_URL = exports.TOPRF_DOMAIN_SEPARATOR = exports.DEFAULT_RPC_TIMEOUT_MS = exports.DEFAULT_AUTH_EXPIRY_S = exports.MAX_PAYLOAD_SIZE = exports.MAX_NO_DATA_INTERVAL_MS = exports.PING_INTERVAL_MS = exports.PROVIDER_CTX = exports.DEFAULT_METADATA = exports.CURRENT_ATTESTOR_VERSION = exports.MAX_CLAIM_TIMESTAMP_DIFF_S = exports.DNS_SERVERS = exports.CONNECTION_TIMEOUT_MS = exports.API_SERVER_PORT = exports.DEFAULT_REMOTE_FILE_FETCH_BASE_URL = exports.BROWSER_RPC_PATHNAME = exports.WS_PATHNAME = exports.DEFAULT_HTTPS_PORT = exports.RECLAIM_USER_AGENT = exports.DEFAULT_ZK_CONCURRENCY = void 0;
const api_1 = require("../proto/api");
exports.DEFAULT_ZK_CONCURRENCY = 10;
exports.RECLAIM_USER_AGENT = 'reclaim/0.0.1';
exports.DEFAULT_HTTPS_PORT = 443;
exports.WS_PATHNAME = '/ws';
exports.BROWSER_RPC_PATHNAME = '/browser-rpc';
exports.DEFAULT_REMOTE_FILE_FETCH_BASE_URL = `${exports.BROWSER_RPC_PATHNAME}/resources`;
exports.API_SERVER_PORT = 8001;
// 10s
exports.CONNECTION_TIMEOUT_MS = 10000;
exports.DNS_SERVERS = [
    '8.8.8.8',
    '8.8.4.4'
];
// 10m
exports.MAX_CLAIM_TIMESTAMP_DIFF_S = 10 * 60;
exports.CURRENT_ATTESTOR_VERSION = api_1.AttestorVersion.ATTESTOR_VERSION_2_0_1;
exports.DEFAULT_METADATA = {
    signatureType: api_1.ServiceSignatureType.SERVICE_SIGNATURE_TYPE_ETH,
    clientVersion: exports.CURRENT_ATTESTOR_VERSION,
    auth: undefined
};
exports.PROVIDER_CTX = { version: exports.CURRENT_ATTESTOR_VERSION };
exports.PING_INTERVAL_MS = 10000;
/**
 * Maximum interval in seconds to wait for before assuming
 * the connection is dead
 * @default 30s
 */
exports.MAX_NO_DATA_INTERVAL_MS = 30000;
exports.MAX_PAYLOAD_SIZE = 512 * 1024 * 1024; // 512MB
exports.DEFAULT_AUTH_EXPIRY_S = 15 * 60; // 15m
exports.DEFAULT_RPC_TIMEOUT_MS = 90000;
exports.TOPRF_DOMAIN_SEPARATOR = 'reclaim-toprf';
exports.BGP_WS_URL = 'wss://ris-live.ripe.net/v1/ws/?client=reclaim-hijack-detector';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29uZmlnL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLHVDQUFrRjtBQUVyRSxRQUFBLHNCQUFzQixHQUFHLEVBQUUsQ0FBQTtBQUUzQixRQUFBLGtCQUFrQixHQUFHLGVBQWUsQ0FBQTtBQUVwQyxRQUFBLGtCQUFrQixHQUFHLEdBQUcsQ0FBQTtBQUV4QixRQUFBLFdBQVcsR0FBRyxLQUFLLENBQUE7QUFFbkIsUUFBQSxvQkFBb0IsR0FBRyxjQUFjLENBQUE7QUFFckMsUUFBQSxrQ0FBa0MsR0FBRyxHQUFHLDRCQUFvQixZQUFZLENBQUE7QUFFeEUsUUFBQSxlQUFlLEdBQUcsSUFBSSxDQUFBO0FBRW5DLE1BQU07QUFDTyxRQUFBLHFCQUFxQixHQUFHLEtBQU0sQ0FBQTtBQUU5QixRQUFBLFdBQVcsR0FBRztJQUMxQixTQUFTO0lBQ1QsU0FBUztDQUNULENBQUE7QUFFRCxNQUFNO0FBQ08sUUFBQSwwQkFBMEIsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFBO0FBRXBDLFFBQUEsd0JBQXdCLEdBQUcscUJBQWUsQ0FBQyxzQkFBc0IsQ0FBQTtBQUVqRSxRQUFBLGdCQUFnQixHQUFnQjtJQUM1QyxhQUFhLEVBQUUsMEJBQW9CLENBQUMsMEJBQTBCO0lBQzlELGFBQWEsRUFBRSxnQ0FBd0I7SUFDdkMsSUFBSSxFQUFFLFNBQVM7Q0FDZixDQUFBO0FBRVksUUFBQSxZQUFZLEdBQUcsRUFBRSxPQUFPLEVBQUUsZ0NBQXdCLEVBQUUsQ0FBQTtBQUVwRCxRQUFBLGdCQUFnQixHQUFHLEtBQU0sQ0FBQTtBQUN0Qzs7OztHQUlHO0FBQ1UsUUFBQSx1QkFBdUIsR0FBRyxLQUFNLENBQUE7QUFFaEMsUUFBQSxnQkFBZ0IsR0FBRyxHQUFHLEdBQUcsSUFBSSxHQUFHLElBQUksQ0FBQSxDQUFDLFFBQVE7QUFFN0MsUUFBQSxxQkFBcUIsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFBLENBQUMsTUFBTTtBQUV0QyxRQUFBLHNCQUFzQixHQUFHLEtBQU0sQ0FBQTtBQUUvQixRQUFBLHNCQUFzQixHQUFHLGVBQWUsQ0FBQTtBQUV4QyxRQUFBLFVBQVUsR0FBRywrREFBK0QsQ0FBQSJ9