"use strict";
// noinspection ExceptionCaughtLocallyJS
Object.defineProperty(exports, "__esModule", { value: true });
exports.extractHTMLElement = extractHTMLElement;
exports.extractHTMLElements = extractHTMLElements;
exports.extractHTMLElementIndex = extractHTMLElementIndex;
exports.extractHTMLElementsIndexes = extractHTMLElementsIndexes;
exports.extractJSONValueIndex = extractJSONValueIndex;
exports.extractJSONValueIndexes = extractJSONValueIndexes;
exports.buildHeaders = buildHeaders;
exports.convertResponsePosToAbsolutePos = convertResponsePosToAbsolutePos;
exports.getRedactionsForChunkHeaders = getRedactionsForChunkHeaders;
exports.parseHttpResponse = parseHttpResponse;
exports.makeRegex = makeRegex;
exports.matchRedactedStrings = matchRedactedStrings;
exports.generateRequstAndResponseFromTranscript = generateRequstAndResponseFromTranscript;
const tls_1 = require("@reclaimprotocol/tls");
const esprima_next_1 = require("esprima-next");
const jsonpath_plus_1 = require("jsonpath-plus");
const utils_1 = require("../../utils");
let RE2;
try {
    RE2 = require('re2');
    if (!Object.keys(RE2).length) {
        RE2 = undefined;
        throw new Error();
    }
}
catch (_a) {
    console.log('RE2 not found. Using standard regex');
}
let jsd;
if (typeof window !== 'undefined') {
    // @ts-ignore
    jsd = window.jsdom;
}
else {
    jsd = require('jsdom');
}
/**
 * Returns only first extracted element
 * @param html
 * @param xpathExpression
 * @param contentsOnly
 */
function extractHTMLElement(html, xpathExpression, contentsOnly) {
    const { start, end } = extractHTMLElementIndex(html, xpathExpression, contentsOnly);
    return html.slice(start, end);
}
/**
 * Returns all extracted elements
 * @param html
 * @param xpathExpression
 * @param contentsOnly
 */
function extractHTMLElements(html, xpathExpression, contentsOnly) {
    const indexes = extractHTMLElementsIndexes(html, xpathExpression, contentsOnly);
    const res = [];
    for (const { start, end } of indexes) {
        res.push(html.slice(start, end));
    }
    return res;
}
/**
 * returns a single index of extracted element
 * @param html
 * @param xpathExpression
 * @param contentsOnly
 */
function extractHTMLElementIndex(html, xpathExpression, contentsOnly) {
    return extractHTMLElementsIndexes(html, xpathExpression, contentsOnly)[0];
}
/**
 * Returns indexes of all extracted elements
 * @param html
 * @param xpathExpression
 * @param contentsOnly
 */
function extractHTMLElementsIndexes(html, xpathExpression, contentsOnly) {
    const dom = new jsd.JSDOM(html, {
        contentType: 'text/html',
        includeNodeLocations: true
    });
    const document = dom.window.document;
    const xpathResult = document.evaluate(xpathExpression, document, null, dom.window.XPathResult.ORDERED_NODE_SNAPSHOT_TYPE, null);
    const nodes = [];
    if ((xpathResult === null || xpathResult === void 0 ? void 0 : xpathResult.resultType) === dom.window.XPathResult.ORDERED_NODE_SNAPSHOT_TYPE &&
        (xpathResult === null || xpathResult === void 0 ? void 0 : xpathResult.snapshotLength)) {
        for (let i = 0; i < xpathResult.snapshotLength; ++i) {
            nodes.push(xpathResult.snapshotItem(i));
        }
    }
    if (!nodes.length) {
        throw new Error(`Failed to find XPath: "${xpathExpression}"`);
    }
    const res = [];
    for (const node of nodes) {
        const nodeLocation = dom.nodeLocation(node);
        if (!nodeLocation) {
            throw new Error(`Failed to find XPath node location: "${xpathExpression}"`);
        }
        if (contentsOnly) {
            const start = nodeLocation.startTag ? nodeLocation.startTag.endOffset : nodeLocation.startOffset;
            const end = nodeLocation.endTag ? nodeLocation.endTag.startOffset : nodeLocation.endOffset;
            res.push({ start, end });
        }
        else {
            res.push({ start: nodeLocation.startOffset, end: nodeLocation.endOffset });
        }
    }
    return res;
}
function extractJSONValueIndex(json, jsonPath) {
    return extractJSONValueIndexes(json, jsonPath)[0];
}
function extractJSONValueIndexes(json, jsonPath) {
    const pointers = (0, jsonpath_plus_1.JSONPath)({
        path: jsonPath,
        json: JSON.parse(json),
        wrap: false,
        resultType: 'pointer',
        eval: 'safe',
        // @ts-ignore
        ignoreEvalErrors: true
    });
    if (!pointers) {
        throw new Error('jsonPath not found');
    }
    const tree = (0, esprima_next_1.parseScript)('(' + json + ')', { range: true }); //wrap in parentheses for esprima to parse
    if (tree.body[0] instanceof esprima_next_1.ExpressionStatement
        && (tree.body[0].expression instanceof esprima_next_1.ObjectExpression || tree.body[0].expression instanceof esprima_next_1.ArrayExpression)) {
        const traversePointers = Array.isArray(pointers) ? pointers : [pointers];
        const res = [];
        for (const pointer of traversePointers) {
            const index = traverse(tree.body[0].expression, '', [pointer]);
            if (index) {
                res.push({
                    start: index.start - 1, //account for '('
                    end: index.end - 1,
                });
            }
        }
        return res;
    }
    throw new Error('jsonPath not found');
}
/**
 * recursively go through AST tree and build a JSON path while it's not equal to the one we search for
 * @param o - esprima expression for root object
 * @param path - path that is being built
 * @param pointers - JSON pointers to compare to
 */
function traverse(o, path, pointers) {
    if (o instanceof esprima_next_1.ObjectExpression) {
        for (const p of o.properties) {
            if (!(p instanceof esprima_next_1.Property)) {
                continue;
            }
            const localPath = p.key.type === esprima_next_1.Syntax.Literal
                ? path + '/' + p.key.value
                : path;
            if (pointers.includes(localPath) && 'range' in p && Array.isArray(p.range)) {
                return {
                    start: p.range[0],
                    end: p.range[1],
                };
            }
            if (p.value instanceof esprima_next_1.ObjectExpression
                || p.value instanceof esprima_next_1.ArrayExpression) {
                const res = traverse(p.value, localPath, pointers);
                if (res) {
                    return res;
                }
            }
        }
    }
    if (o instanceof esprima_next_1.ArrayExpression) {
        for (let i = 0; i < o.elements.length; i++) {
            const element = o.elements[i];
            if (!element) {
                continue;
            }
            const localPath = path + '/' + i;
            if (pointers.includes(localPath) &&
                'range' in element &&
                Array.isArray(element.range)) {
                return {
                    start: element.range[0],
                    end: element.range[1],
                };
            }
            if (element instanceof esprima_next_1.ObjectExpression) {
                const res = traverse(element, localPath, pointers);
                if (res) {
                    return res;
                }
            }
            if (element instanceof esprima_next_1.ArrayExpression) {
                const res = traverse(element, localPath, pointers);
                if (res) {
                    return res;
                }
            }
        }
    }
    return null;
}
function buildHeaders(input) {
    const headers = [];
    for (const [key, value] of Object.entries(input || {})) {
        headers.push(`${key}: ${value}`);
    }
    return headers;
}
/**
 * Converts position in HTTP response body to an absolute position in TLS transcript considering chunked encoding
 * @param pos
 * @param bodyStartIdx
 * @param chunks
 */
function convertResponsePosToAbsolutePos(pos, bodyStartIdx, chunks) {
    if (chunks === null || chunks === void 0 ? void 0 : chunks.length) {
        let chunkBodyStart = 0;
        for (const chunk of chunks) {
            const chunkSize = chunk.toIndex - chunk.fromIndex;
            if (pos >= chunkBodyStart && pos <= (chunkBodyStart + chunkSize)) {
                return pos - chunkBodyStart + chunk.fromIndex;
            }
            chunkBodyStart += chunkSize;
        }
        throw new Error('position out of range');
    }
    return bodyStartIdx + pos;
}
/**
 * If this reveal spans the boundary of two chunks, we'll
 *
 */
function getRedactionsForChunkHeaders(from, to, chunks) {
    const res = [];
    if (!(chunks === null || chunks === void 0 ? void 0 : chunks.length)) {
        return res;
    }
    for (let i = 1; i < (chunks === null || chunks === void 0 ? void 0 : chunks.length); i++) {
        const chunk = chunks[i];
        if (chunk.fromIndex > from && chunk.fromIndex < to) {
            res.push({
                fromIndex: chunks[i - 1].toIndex,
                toIndex: chunk.fromIndex,
            });
        }
    }
    return res;
}
function parseHttpResponse(buff) {
    const parser = (0, utils_1.makeHttpResponseParser)();
    parser.onChunk(buff);
    parser.streamEnded();
    return parser.res;
}
function makeRegex(str) {
    if (RE2 !== undefined) {
        return RE2(str, 'sgiu');
    }
    return new RegExp(str, 'sgi');
}
const TEMPLATE_START_CHARCODE = '{'.charCodeAt(0);
const TEMPLATE_END_CHARCODE = '}'.charCodeAt(0);
/**
 * Try to match strings that contain templates like {{param}}
 * against redacted string that has *** instead of that param
 */
function matchRedactedStrings(templateString, redactedString) {
    if (templateString.length === 0 && (redactedString === null || redactedString === void 0 ? void 0 : redactedString.length) === 0) {
        return true;
    }
    if (!redactedString) {
        return false;
    }
    let ts = -1;
    let rs = -1;
    while (ts < templateString.length && rs < redactedString.length) {
        let ct = getTChar();
        let cr = getRChar();
        if (ct !== cr) {
            // only valid if param contains "{" & redacted contains "*"
            if (ct === TEMPLATE_START_CHARCODE && cr === utils_1.REDACTION_CHAR_CODE) {
                //check that the char after first "{" is also "{"
                if (getTChar() !== TEMPLATE_START_CHARCODE) {
                    return false;
                }
                //look for first closing bracket
                while (((ct = getTChar()) !== TEMPLATE_END_CHARCODE) && ct !== -1) {
                }
                //look for second closing bracket
                while (((ct = getTChar()) !== TEMPLATE_END_CHARCODE) && ct !== -1) {
                }
                if (ct === -1) {
                    return false;
                }
                //find the end of redaction
                while (((cr = getRChar()) === utils_1.REDACTION_CHAR_CODE) && cr !== -1) {
                }
                if (cr === -1) {
                    //if there's nothing after template too then both ended at the end of strings
                    return getTChar() === -1;
                }
                //rewind redacted string position back 1 char because we read one extra
                rs--;
            }
            else {
                return false;
            }
        }
    }
    function getTChar() {
        ts++;
        if (ts < templateString.length) {
            return templateString[ts];
        }
        else {
            return -1;
        }
    }
    function getRChar() {
        if (!redactedString) {
            return -1;
        }
        rs++;
        if (rs < redactedString.length) {
            return redactedString[rs];
        }
        else {
            return -1;
        }
    }
    return ts === templateString.length && rs === redactedString.length;
}
function generateRequstAndResponseFromTranscript(transcript, tlsVersion) {
    const allPackets = transcript;
    const packets = [];
    for (const b of allPackets) {
        if (b.message.type !== 'ciphertext'
            || !(0, utils_1.isApplicationData)(b.message, tlsVersion)) {
            continue;
        }
        const plaintext = tlsVersion === 'TLS1_3'
            ? b.message.plaintext.slice(0, -1)
            : b.message.plaintext;
        packets.push({
            message: plaintext,
            sender: b.sender
        });
    }
    const req = (0, utils_1.getHttpRequestDataFromTranscript)(packets);
    const responsePackets = (0, tls_1.concatenateUint8Arrays)(packets.filter(p => p.sender === 'server').map(p => p.message).filter(b => !b.every(b => b === utils_1.REDACTION_CHAR_CODE)));
    const res = parseHttpResponse(responsePackets);
    return { req, res };
}
//# sourceMappingURL=data:application/json;base64,