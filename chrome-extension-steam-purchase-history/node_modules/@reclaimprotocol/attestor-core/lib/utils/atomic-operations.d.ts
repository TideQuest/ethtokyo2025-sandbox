/**
 * Atomic operations utility for preventing race conditions.
 * Provides mutex-like locks using Promise-based mutual exclusion.
 */
export declare class AtomicOperations {
    private static locks;
    /**
     * Execute a function with a named lock to prevent concurrent execution.
     * @param lockName Unique identifier for the lock
     * @param fn Function to execute atomically
     * @returns Promise that resolves with the function's return value
     */
    static withLock<T>(lockName: string, fn: () => Promise<T>): Promise<T>;
    /**
     * Check if a lock is currently held.
     * @param lockName Name of the lock to check
     * @returns True if the lock is currently held
     */
    static isLocked(lockName: string): boolean;
    /**
     * Clear all locks (for testing/cleanup).
     */
    static clearAllLocks(): void;
}
