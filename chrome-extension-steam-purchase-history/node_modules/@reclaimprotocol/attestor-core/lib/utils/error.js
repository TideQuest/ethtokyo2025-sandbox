"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AttestorError = void 0;
const api_1 = require("../proto/api");
/**
 * Represents an error that can be thrown by the Attestor Core
 * or server. Provides a code, and optional data
 * to pass along with the error.
 */
class AttestorError extends Error {
    constructor(code, message, data) {
        super(message);
        this.code = code;
        this.message = message;
        this.data = data;
        this.name = 'AttestorError';
    }
    /**
     * Encodes the error as a ErrorData
     * protobuf message
     */
    toProto() {
        return api_1.ErrorData.create({
            code: api_1.ErrorCode[this.code],
            message: this.message,
            data: JSON.stringify(this.data)
        });
    }
    static fromProto(data = api_1.ErrorData.fromJSON({})) {
        return new AttestorError(api_1.ErrorCode[data.code], data.message, data.data ? JSON.parse(data.data) : undefined);
    }
    static fromError(err) {
        if (err instanceof AttestorError) {
            return err;
        }
        return new AttestorError('ERROR_INTERNAL', err.message);
    }
    static badRequest(message, data) {
        return new AttestorError('ERROR_BAD_REQUEST', message, data);
    }
}
exports.AttestorError = AttestorError;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXJyb3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdXRpbHMvZXJyb3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsdUNBQW9EO0FBRXBEOzs7O0dBSUc7QUFDSCxNQUFhLGFBQWMsU0FBUSxLQUFLO0lBSXZDLFlBQ1EsSUFBNEIsRUFDNUIsT0FBZSxFQUNmLElBQTJCO1FBRWxDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQTtRQUpQLFNBQUksR0FBSixJQUFJLENBQXdCO1FBQzVCLFlBQU8sR0FBUCxPQUFPLENBQVE7UUFDZixTQUFJLEdBQUosSUFBSSxDQUF1QjtRQUwxQixTQUFJLEdBQUcsZUFBZSxDQUFBO0lBUS9CLENBQUM7SUFFRDs7O09BR0c7SUFDSCxPQUFPO1FBQ04sT0FBTyxlQUFTLENBQUMsTUFBTSxDQUFDO1lBQ3ZCLElBQUksRUFBRSxlQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQztZQUMxQixPQUFPLEVBQUUsSUFBSSxDQUFDLE9BQU87WUFDckIsSUFBSSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQztTQUMvQixDQUFDLENBQUE7SUFDSCxDQUFDO0lBRUQsTUFBTSxDQUFDLFNBQVMsQ0FBQyxJQUFJLEdBQUcsZUFBUyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUM7UUFDN0MsT0FBTyxJQUFJLGFBQWEsQ0FDdkIsZUFBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQTJCLEVBQzlDLElBQUksQ0FBQyxPQUFPLEVBQ1osSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FDN0MsQ0FBQTtJQUNGLENBQUM7SUFFRCxNQUFNLENBQUMsU0FBUyxDQUFDLEdBQVU7UUFDMUIsSUFBRyxHQUFHLFlBQVksYUFBYSxFQUFFLENBQUM7WUFDakMsT0FBTyxHQUFHLENBQUE7UUFDWCxDQUFDO1FBRUQsT0FBTyxJQUFJLGFBQWEsQ0FDdkIsZ0JBQWdCLEVBQ2hCLEdBQUcsQ0FBQyxPQUFPLENBQ1gsQ0FBQTtJQUNGLENBQUM7SUFFRCxNQUFNLENBQUMsVUFBVSxDQUFDLE9BQWUsRUFBRSxJQUEyQjtRQUM3RCxPQUFPLElBQUksYUFBYSxDQUN2QixtQkFBbUIsRUFDbkIsT0FBTyxFQUNQLElBQUksQ0FDSixDQUFBO0lBQ0YsQ0FBQztDQUNEO0FBbERELHNDQWtEQyJ9