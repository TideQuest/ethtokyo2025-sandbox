"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getApm = getApm;
const elastic_apm_node_1 = __importDefault(require("elastic-apm-node"));
const env_1 = require("../../utils/env");
const logger_1 = require("../../utils/logger");
let apm;
/**
 * Initialises the APM agent if required,
 * and returns it.
 * If ELASTIC_APM_SERVER_URL & ELASTIC_APM_SECRET_TOKEN
 * are not set will return undefined
 *
 * Utilises the standard env variables mentioned
 * here: https://www.elastic.co/guide/en/apm/agent/nodejs/current/custom-stack.html#custom-stack-advanced-configuration
 */
function getApm() {
    if (!(0, env_1.getEnvVariable)('ELASTIC_APM_SERVER_URL')
        || !(0, env_1.getEnvVariable)('ELASTIC_APM_SECRET_TOKEN')) {
        logger_1.logger.info('ELASTIC_APM_SERVER_URL or ELASTIC_APM_SECRET_TOKEN not found'
            + ' in env, APM agent not initialised');
        return undefined;
    }
    if (!apm) {
        const sampleRate = +((0, env_1.getEnvVariable)('ELASTIC_APM_SAMPLE_RATE')
            || '0.1');
        apm = elastic_apm_node_1.default.start({
            serviceName: 'reclaim_attestor',
            serviceVersion: '4.0.0',
            transactionSampleRate: sampleRate,
            instrumentIncomingHTTPRequests: true,
            usePathAsTransactionName: true,
            instrument: true,
            captureHeaders: true,
        });
        logger_1.logger.info('initialised APM agent');
    }
    return apm;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NlcnZlci91dGlscy9hcG0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFlQSx3QkE4QkM7QUE3Q0Qsd0VBQW9EO0FBQ3BELHVDQUE4QztBQUM5Qyw2Q0FBeUM7QUFFekMsSUFBSSxHQUFzQixDQUFBO0FBRTFCOzs7Ozs7OztHQVFHO0FBQ0gsU0FBZ0IsTUFBTTtJQUNyQixJQUNDLENBQUMsSUFBQSxvQkFBYyxFQUFDLHdCQUF3QixDQUFDO1dBQ3RDLENBQUMsSUFBQSxvQkFBYyxFQUFDLDBCQUEwQixDQUFDLEVBQzdDLENBQUM7UUFDRixlQUFNLENBQUMsSUFBSSxDQUNWLDhEQUE4RDtjQUM1RCxvQ0FBb0MsQ0FDdEMsQ0FBQTtRQUNELE9BQU8sU0FBUyxDQUFBO0lBQ2pCLENBQUM7SUFFRCxJQUFHLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDVCxNQUFNLFVBQVUsR0FBRyxDQUFDLENBQ25CLElBQUEsb0JBQWMsRUFBQyx5QkFBeUIsQ0FBQztlQUN0QyxLQUFLLENBQ1IsQ0FBQTtRQUNELEdBQUcsR0FBRywwQkFBVSxDQUFDLEtBQUssQ0FBQztZQUN0QixXQUFXLEVBQUUsa0JBQWtCO1lBQy9CLGNBQWMsRUFBRSxPQUFPO1lBQ3ZCLHFCQUFxQixFQUFFLFVBQVU7WUFDakMsOEJBQThCLEVBQUUsSUFBSTtZQUNwQyx3QkFBd0IsRUFBRSxJQUFJO1lBQzlCLFVBQVUsRUFBRSxJQUFJO1lBQ2hCLGNBQWMsRUFBRSxJQUFJO1NBQ3BCLENBQUMsQ0FBQTtRQUNGLGVBQU0sQ0FBQyxJQUFJLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtJQUNyQyxDQUFDO0lBRUQsT0FBTyxHQUFHLENBQUE7QUFDWCxDQUFDIn0=