"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.processHandshake = processHandshake;
const tls_1 = require("@reclaimprotocol/tls");
const parse_certificate_1 = require("@reclaimprotocol/tls/lib/utils/parse-certificate");
const api_1 = require("../../proto/api");
const utils_1 = require("../../utils");
const RECORD_LENGTH_BYTES = 3;
/**
 * Verifies server cert chain and removes handshake messages from transcript
 * @param receipt
 * @param logger
 */
async function processHandshake(receipt, logger) {
    let currentPacketIdx = 0;
    let readPacketIdx = 0;
    let handshakeData = Uint8Array.from([]);
    let packetData;
    const handshakeRawMessages = [];
    const certificates = [];
    let cipherSuite = undefined;
    let tlsVersion = undefined;
    let serverRandom = undefined;
    let clientRandom = undefined;
    let serverFinishedIdx = -1;
    let clientFinishedIdx = -1;
    let certVerified = false;
    let hostname = undefined;
    let clientChangeCipherSpecMsgIdx = -1;
    let serverChangeCipherSpecMsgIdx = -1;
    while ((packetData = await readPacket())) {
        const { type, content } = packetData;
        switch (type) {
            case tls_1.SUPPORTED_RECORD_TYPE_MAP.CLIENT_HELLO:
                const clientHello = (0, tls_1.parseClientHello)(handshakeRawMessages[0]);
                clientRandom = clientHello.serverRandom;
                const { SERVER_NAME: sni } = clientHello.extensions;
                hostname = sni === null || sni === void 0 ? void 0 : sni.serverName;
                if (!hostname) {
                    throw new Error('client hello has no SNI');
                }
                break;
            case tls_1.SUPPORTED_RECORD_TYPE_MAP.SERVER_HELLO:
                const serverHello = await (0, tls_1.parseServerHello)(content);
                cipherSuite = serverHello.cipherSuite;
                tlsVersion = serverHello.serverTlsVersion;
                serverRandom = serverHello.serverRandom;
                logger.info({ serverTLSVersion: tlsVersion, cipherSuite }, 'extracted server hello params');
                break;
            case tls_1.SUPPORTED_RECORD_TYPE_MAP.CERTIFICATE:
                const parseResult = (0, tls_1.parseCertificates)(content, { version: tlsVersion });
                certificates.push(...parseResult.certificates);
                break;
            case tls_1.SUPPORTED_RECORD_TYPE_MAP.CERTIFICATE_VERIFY:
                const signature = (0, tls_1.parseServerCertificateVerify)(content);
                if (!(certificates === null || certificates === void 0 ? void 0 : certificates.length)) {
                    throw new Error('No provider certificates received');
                }
                const signatureData = await (0, tls_1.getSignatureDataTls13)(handshakeRawMessages.slice(0, -1), cipherSuite);
                await (0, tls_1.verifyCertificateSignature)({
                    ...signature,
                    publicKey: certificates[0].getPublicKey(),
                    signatureData,
                });
                await (0, parse_certificate_1.verifyCertificateChain)(certificates, hostname);
                logger.info({ host: hostname }, 'verified provider certificate chain');
                certVerified = true;
                break;
            case tls_1.SUPPORTED_RECORD_TYPE_MAP.SERVER_KEY_SHARE:
                if (!(certificates === null || certificates === void 0 ? void 0 : certificates.length)) {
                    throw new Error('No provider certificates received');
                }
                const keyShare = await (0, tls_1.processServerKeyShare)(content);
                const signatureData12 = await (0, tls_1.getSignatureDataTls12)({
                    clientRandom: clientRandom,
                    serverRandom: serverRandom,
                    curveType: keyShare.publicKeyType,
                    publicKey: keyShare.publicKey,
                });
                // verify signature
                await (0, tls_1.verifyCertificateSignature)({
                    signature: keyShare.signatureBytes,
                    algorithm: keyShare.signatureAlgorithm,
                    publicKey: certificates[0].getPublicKey(),
                    signatureData: signatureData12,
                });
                await (0, parse_certificate_1.verifyCertificateChain)(certificates, hostname);
                logger.info({ host: hostname }, 'verified provider certificate chain');
                certVerified = true;
                break;
            case tls_1.SUPPORTED_RECORD_TYPE_MAP.FINISHED:
                if (receipt[readPacketIdx].sender === api_1.TranscriptMessageSenderType.TRANSCRIPT_MESSAGE_SENDER_TYPE_CLIENT) {
                    clientFinishedIdx = readPacketIdx;
                }
                else {
                    serverFinishedIdx = readPacketIdx;
                }
                break;
        }
    }
    if (!certVerified) {
        throw new Error('No provider certificates received');
    }
    if (tlsVersion === 'TLS1_3' && serverFinishedIdx < 0) {
        throw new Error('server finished message not found');
    }
    if (tlsVersion === 'TLS1_2' && (serverChangeCipherSpecMsgIdx < 0 || clientChangeCipherSpecMsgIdx < 0)) {
        throw new Error('change cipher spec message not found');
    }
    async function readPacket(getMoreData = false) {
        var _a;
        if (currentPacketIdx > (receipt.length - 1)) {
            return;
        }
        if (certVerified && serverFinishedIdx > 0 && clientFinishedIdx > 0) {
            return;
        }
        readPacketIdx = currentPacketIdx;
        if (!(handshakeData === null || handshakeData === void 0 ? void 0 : handshakeData.length) || getMoreData) {
            let newHandshakeData;
            const { message, reveal, sender } = receipt[currentPacketIdx];
            const recordHeader = message.slice(0, 5);
            const content = getWithoutHeader(message);
            if (message[0] === tls_1.PACKET_TYPE['CHANGE_CIPHER_SPEC']) { //skip change cipher spec message
                if (sender === api_1.TranscriptMessageSenderType.TRANSCRIPT_MESSAGE_SENDER_TYPE_CLIENT) {
                    clientChangeCipherSpecMsgIdx = currentPacketIdx;
                }
                else {
                    serverChangeCipherSpecMsgIdx = currentPacketIdx;
                }
                currentPacketIdx++;
                return await readPacket();
            }
            if (message[0] === tls_1.PACKET_TYPE['WRAPPED_RECORD'] ||
                (serverChangeCipherSpecMsgIdx > 0 && sender === api_1.TranscriptMessageSenderType.TRANSCRIPT_MESSAGE_SENDER_TYPE_SERVER) ||
                (clientChangeCipherSpecMsgIdx > 0 && sender === api_1.TranscriptMessageSenderType.TRANSCRIPT_MESSAGE_SENDER_TYPE_CLIENT)) { // encrypted
                if (!tlsVersion || !cipherSuite) {
                    throw new Error('Could not find cipherSuite to use');
                }
                if (!((_a = reveal === null || reveal === void 0 ? void 0 : reveal.directReveal) === null || _a === void 0 ? void 0 : _a.key)) {
                    throw new Error('no direct reveal for handshake packet');
                }
                const { plaintext } = await (0, utils_1.decryptDirect)(reveal === null || reveal === void 0 ? void 0 : reveal.directReveal, cipherSuite, recordHeader, tlsVersion, content);
                newHandshakeData = plaintext;
                if (tlsVersion === 'TLS1_3') {
                    newHandshakeData = newHandshakeData.slice(0, -1);
                }
            }
            else {
                newHandshakeData = content;
            }
            handshakeData = (0, tls_1.concatenateUint8Arrays)([handshakeData, newHandshakeData]);
        }
        const type = handshakeData[0];
        const content = readWithLength(handshakeData.slice(1), RECORD_LENGTH_BYTES);
        if (!content) {
            logger.warn('missing bytes from packet');
            currentPacketIdx++;
            return await readPacket(true);
        }
        const totalLength = 1 + RECORD_LENGTH_BYTES + content.length;
        handshakeRawMessages.push(handshakeData.slice(0, totalLength));
        handshakeData = handshakeData.slice(totalLength);
        if (!handshakeData.length) {
            currentPacketIdx++;
        }
        return { type, content };
    }
    const nextMsgIndex = Math.max(serverFinishedIdx, clientFinishedIdx) + 1;
    return {
        tlsVersion: tlsVersion,
        cipherSuite: cipherSuite,
        hostname: hostname,
        nextMsgIndex
    };
}
function getWithoutHeader(message) {
    // strip the record header (xx 03 03 xx xx)
    return message.slice(5);
}
function readWithLength(data, lengthBytes = 2) {
    const dataView = (0, tls_1.uint8ArrayToDataView)(data);
    const length = lengthBytes === 1
        ? dataView.getUint8(0)
        : dataView.getUint16(lengthBytes === 3 ? 1 : 0);
    if (data.length < lengthBytes + length) {
        return undefined;
    }
    return data.slice(lengthBytes, lengthBytes + length);
}
//# sourceMappingURL=data:application/json;base64,