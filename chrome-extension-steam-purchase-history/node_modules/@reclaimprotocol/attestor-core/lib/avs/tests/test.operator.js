"use strict";
/**
 * This file tests the operator registration and task creation.
 * The tests were initially written using Node's own testing framework, but
 * later switched to Jest. Thus, the tests were initially written in a nested
 * format, but were later refactored to use Jest's `describe` and `it` functions.
 * Apologies for the hence resulting inconsistency in the code style.
 *
 * The nesting of tests is helpful as the tests logically depend on each other,
 * and the nesting helps save time by not repeating the same setup code.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ethers_1 = require("ethers");
const utils_1 = require("ethers/lib/utils");
const node_assert_1 = __importDefault(require("node:assert"));
const create_claim_on_avs_1 = require("../../avs/client/create-claim-on-avs");
const utils_2 = require("../../avs/tests/utils");
const contracts_1 = require("../../avs/utils/contracts");
const register_1 = require("../../avs/utils/register");
const tasks_1 = require("../../avs/utils/tasks");
const describe_with_server_1 = require("../../tests/describe-with-server");
const utils_3 = require("../../utils");
const contracts = (0, contracts_1.getContracts)();
jest.setTimeout(60000);
describe('Operators', () => {
    let shutdownChain;
    let operators = [];
    const createClaimFn = jest.fn(() => {
        throw new Error('Not implemented');
    });
    let registeredFirstOperator = false;
    let registeredSecondOperator = false;
    beforeAll(async () => {
        shutdownChain = await (0, utils_2.runFreshChain)();
        operators = [{ wallet: contracts.wallet, url: 'ws://example.com' }];
        createClaimFn.mockImplementation(async ({ ownerPrivateKey, name, params, context, client, timestampS }) => {
            if (!('url' in client)) {
                throw new Error('Invalid client');
            }
            const op = operators
                .find(op => op.url === client.url.toString());
            if (!op) {
                throw new Error('Operator not found: ' + client.url);
            }
            const userWallet = new ethers_1.Wallet(ownerPrivateKey, contracts.provider);
            const data = (0, utils_3.createSignDataForClaim)({
                provider: name,
                parameters: (0, utils_3.canonicalStringify)(params),
                context: context
                    ? (0, utils_3.canonicalStringify)(context)
                    : '',
                timestampS: timestampS,
                owner: userWallet.address,
                epoch: 1
            });
            const signData = await op.wallet.signMessage(data);
            const signArray = (0, utils_1.arrayify)(signData);
            return {
                signatures: { claimSignature: signArray }
            };
        });
    });
    afterAll(async () => {
        await (shutdownChain === null || shutdownChain === void 0 ? void 0 : shutdownChain());
    });
    it('should prevent registration of non-whitelisted operator', async () => {
        const op = randomWallet();
        const url = 'ws://abcd.com/ws';
        await (0, utils_2.sendGasToAddress)(op.address);
        // using try-catch since jest.rejects.toMatchObject wasn't
        // working as expected
        try {
            await (0, register_1.registerOperator)({
                wallet: op,
                reclaimRpcUrl: url
            });
            throw new Error('Should have thrown an error');
        }
        catch (err) {
            expect(err.message).toMatch(/Operator not whitelisted/);
        }
    });
    it('should prevent non-admins from modifying internal settings', async () => {
        const nonAdmin = randomWallet();
        await (0, utils_2.sendGasToAddress)(nonAdmin.address);
        const contract = contracts.contract.connect(nonAdmin);
        const OPS = [
            () => (contract.whitelistAddressAsOperator(nonAdmin.address, true)),
            () => (contract.updateTaskCreationMetadata({
                minSignaturesPerTask: 2,
                maxTaskLifetimeS: 10,
                maxTaskCreationDelayS: 0
            }))
        ];
        for (const op of OPS) {
            try {
                await op();
                throw new Error('Should have thrown an error');
            }
            catch (err) {
                expect(err.message).toMatch(/Caller is not admin/);
            }
        }
    });
    it('should register the operator on chain', async () => {
        await registerFirstOperator();
    });
    it('should not throw an error on repeated registration', async () => {
        await registerFirstOperator();
        await (0, register_1.registerOperator)();
    });
    it('should register multiple operators', async () => {
        await registerFirstOperator();
        await registerSecondOperator();
    });
    describe('With Task', () => {
        let userWallet;
        let arg;
        beforeAll(async () => {
            await registerFirstOperator();
            await registerSecondOperator();
            userWallet = randomWallet();
            await (0, utils_2.sendGasToAddress)(userWallet.address);
        });
        it('should create a task', async () => {
            arg = await createNewTask(userWallet);
        });
        it('should mark a task as completed', async () => {
            if (!arg) {
                arg = await createNewTask(userWallet);
            }
            await markTaskAsCompleted(userWallet, arg);
        });
        it('should create a task for another wallet', async () => {
            const ownerWallet = randomWallet();
            const rslt = await createNewTask(userWallet, ownerWallet);
            node_assert_1.default.strictEqual(rslt.task.request.owner, ownerWallet.address);
        });
    });
    (0, describe_with_server_1.describeWithServer)('With Task & Attestor Server', opts => {
        beforeAll(async () => {
            await registerFirstOperator();
            await registerSecondOperator();
        });
        it('should create claim via createClaimOnChain', createClaimViaFn);
        it('should make attestor pay for claim', async () => {
            const userWallet = randomWallet();
            const { object: rslt } = await (0, create_claim_on_avs_1.createClaimOnAvs)({
                ownerPrivateKey: userWallet.privateKey,
                name: 'http',
                params: {
                    url: 'https://example.com',
                    method: 'GET',
                    responseRedactions: [],
                    responseMatches: [
                        {
                            type: 'contains',
                            value: 'test'
                        }
                    ]
                },
                secretParams: {},
                payer: { attestor: opts.serverUrl },
                createClaimOnAttestor: createClaimFn
            });
            node_assert_1.default.strictEqual(rslt.task.task.request.owner, userWallet.address);
        });
    });
    async function registerFirstOperator() {
        if (registeredFirstOperator) {
            return;
        }
        // fetch address from the env variable, PRIVATE_KEY
        const operatorAddress = await contracts.wallet.address;
        await (0, utils_2.sendGasToAddress)(operatorAddress);
        await contracts.contract.whitelistAddressAsOperator(operatorAddress, true);
        await (0, register_1.registerOperator)({
            wallet: operators[0].wallet,
            reclaimRpcUrl: operators[0].url
        });
        node_assert_1.default.strictEqual(await contracts.registryContract
            .operatorRegistered(operatorAddress), true);
        const op = await contracts.contract.registeredOperators(0);
        node_assert_1.default.strictEqual(op.addr, operatorAddress);
        registeredFirstOperator = true;
    }
    async function registerSecondOperator() {
        if (registeredSecondOperator) {
            return;
        }
        const wallet2 = randomWallet();
        const url = 'ws://abcd.com/ws';
        await (0, utils_2.sendGasToAddress)(wallet2.address);
        await contracts.contract.whitelistAddressAsOperator(wallet2.address, true);
        await (0, register_1.registerOperator)({
            wallet: wallet2,
            reclaimRpcUrl: url
        });
        const newAddr = wallet2.address;
        node_assert_1.default.strictEqual(await contracts.registryContract.operatorRegistered(newAddr), true);
        const meta = await contracts.contract
            .getMetadataForOperator(newAddr);
        node_assert_1.default.strictEqual(meta.url, url);
        node_assert_1.default.strictEqual(meta.addr, newAddr);
        operators.push({ wallet: wallet2, url });
        registeredSecondOperator = true;
    }
    async function createNewTask(userWallet, claimOwner = userWallet) {
        var _a, _b;
        const params = makeNewCreateClaimParams();
        const { task } = await (0, tasks_1.createNewClaimRequestOnChain)({
            request: {
                provider: params.provider,
                claimUserId: new Uint8Array(32),
                claimHash: (0, utils_3.getIdentifierFromClaimInfo)(params),
                requestedAt: (0, utils_3.unixTimestampSeconds)(),
            },
            payer: userWallet,
            owner: claimOwner
        });
        node_assert_1.default.strictEqual(!!task, true);
        node_assert_1.default.equal((_b = (_a = task === null || task === void 0 ? void 0 : task.task) === null || _a === void 0 ? void 0 : _a.request) === null || _b === void 0 ? void 0 : _b.provider, params.provider);
        return task;
    }
    async function markTaskAsCompleted(userWallet, { task, taskIndex }) {
        var _a;
        node_assert_1.default.ok(task.operators.length > 0, 'No operators selected for the task');
        const req = task.request;
        const signData = (0, utils_3.createSignDataForClaim)({
            identifier: req.claimHash,
            timestampS: +task.createdAt.toString(),
            owner: userWallet.address,
            epoch: 1
        });
        const signatures = [];
        for (const { wallet: operator } of operators) {
            const opAddr = operator.address;
            const selectedOp = task.operators
                .some(op => op.addr === opAddr);
            if (!selectedOp) {
                continue;
            }
            const signature = await operator
                .signMessage(signData);
            signatures.push(signature);
        }
        node_assert_1.default.strictEqual(signatures.length, task.operators.length);
        const tx = await contracts.contract
            .connect(userWallet)
            .taskCompleted({ task, signatures }, taskIndex);
        const rslt = await tx.wait();
        const events = rslt.events;
        const arg = (_a = events === null || events === void 0 ? void 0 : events[0]) === null || _a === void 0 ? void 0 : _a.args;
        node_assert_1.default.strictEqual(events === null || events === void 0 ? void 0 : events.length, 1);
        node_assert_1.default.ok(arg.task);
    }
    async function createClaimViaFn() {
        const tx = await contracts.contract.updateTaskCreationMetadata({
            minSignaturesPerTask: 2,
            maxTaskLifetimeS: 0,
            maxTaskCreationDelayS: 0
        });
        await tx.wait();
        console.log('min sigs set to 2');
        const userWallet = randomWallet();
        await (0, utils_2.sendGasToAddress)(userWallet.address);
        const { object: rslt } = await (0, create_claim_on_avs_1.createClaimOnAvs)({
            ownerPrivateKey: userWallet.privateKey,
            name: 'http',
            params: {
                url: 'https://example.com',
                method: 'GET',
                responseRedactions: [],
                responseMatches: [
                    {
                        type: 'contains',
                        value: 'test'
                    }
                ]
            },
            secretParams: {},
            createClaimOnAttestor: createClaimFn
        });
        // ensure two operators were selected
        node_assert_1.default.equal(rslt.task.task.operators.length, 2);
        node_assert_1.default.equal(rslt.task.signatures.length, 2);
    }
});
function randomWallet() {
    return ethers_1.Wallet.createRandom()
        .connect(contracts.provider);
}
function makeNewCreateClaimParams() {
    return {
        provider: 'http',
        parameters: (0, utils_3.canonicalStringify)({
            url: 'https://example.com',
            method: 'GET',
            responseRedactions: [],
            responseMatches: [
                {
                    type: 'contains',
                    value: 'test'
                }
            ]
        }),
        context: ''
    };
}
//# sourceMappingURL=data:application/json;base64,