import { ethers, type Wallet } from 'ethers';
import type { IReclaimServiceManager, NewTaskCreatedEventObject } from '../../avs/contracts/ReclaimServiceManager';
type CreateClaimWithoutOwner = Omit<IReclaimServiceManager.ClaimRequestStruct, 'owner'>;
type CreateNewClaimRequestOnChainOpts = {
    request: CreateClaimWithoutOwner;
    payer: Wallet;
    chainId?: string;
} & ({
    owner: Wallet;
} | {
    /**
     * Address of the owner of the claim
     */
    owner: string;
    requestSignature?: string | Uint8Array;
});
export declare function createNewClaimRequestOnChain({ request, payer, chainId, ...rest }: CreateNewClaimRequestOnChainOpts): Promise<{
    task: NewTaskCreatedEventObject;
    tx: ethers.ContractReceipt;
}>;
export declare function signClaimRequest(request: IReclaimServiceManager.ClaimRequestStruct, owner: Wallet, chainId?: string): Promise<Uint8Array<ArrayBufferLike>>;
export {};
