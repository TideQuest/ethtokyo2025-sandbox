export type DHGroup = {
    p: bigint;
    g: bigint;
};
export declare const DHGroups: {
    modp1: {
        p: bigint;
        g: bigint;
    };
    modp2: {
        p: bigint;
        g: bigint;
    };
    modp5: {
        p: bigint;
        g: bigint;
    };
    modp14: {
        p: bigint;
        g: bigint;
    };
    modp15: {
        p: bigint;
        g: bigint;
    };
    modp16: {
        p: bigint;
        g: bigint;
    };
    modp17: {
        p: bigint;
        g: bigint;
    };
    modp18: {
        p: bigint;
        g: bigint;
    };
};
/**
 * Basic Diffie Hellman implementation with focus on simplicity.
 * For now: non-constant time operations, no precomputes.
 *
 * We can speedup operations same way as in @noble/curves,
 * but if re-key happens often it could be slow.
 * @param group well-known modp group or {p: bigint, g: bigint};
 * @returns
 */
export declare const DH: (group: keyof DHGroup | DHGroup) => {
    randomPrivateKey(): Uint8Array;
    getPublicKey(privateKey: Uint8Array): Uint8Array;
    getSharedSecret(privateA: Uint8Array, publicB: Uint8Array): Uint8Array;
};
export declare const diffieHellman: (group: keyof DHGroup | DHGroup) => {
    randomPrivateKey(): Uint8Array;
    getPublicKey(privateKey: Uint8Array): Uint8Array;
    getSharedSecret(privateA: Uint8Array, publicB: Uint8Array): Uint8Array;
};
//# sourceMappingURL=dh.d.ts.map