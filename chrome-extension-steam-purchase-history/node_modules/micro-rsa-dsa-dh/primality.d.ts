import { RandFn } from './utils.js';
/**
 * Function to perform the Miller-Rabin primality test
 * @param w The odd integer to be tested for primality. This will be either p or q, or one of the auxiliary primes.
 * @param iterations The number of iterations of the test to be performed
 * @returns true for 'PROBABLY PRIME' and false for 'COMPOSITE'
 */
export declare function millerRabin(w: bigint, iterations: number, randFn?: RandFn): boolean;
export declare function millerRabinBaseTest(w: bigint, base: bigint): boolean;
/**
 * This routine computes the Jacobi symbol. From FIPS186-5 (B.5 JACOBI SYMBOL ALGORITHM)
 * @param a initial value is in the sequence {5, –7, 9, –11, 13, –15, 17, ...}
 * @param n initial value is the candidate being tested
 * @returns Jacobi symbol
 */
export declare function jacobi(a: bigint, n: bigint): number;
/**
 * (General) Lucas Probabilistic Primality Test (From FIPS186-5)
 * @param C positive integer
 * @returns true if number is probably prime, false if composite
 */
export declare function lucas(C: bigint): boolean;
/**
 * Baillie–PSW primality test
 * @param n number to check if prime
 * @param iters iterations of Miler-Rabin tests
 * @param randFn
 * @returns true if probable prime
 */
export declare function bailliePSW(n: bigint): boolean;
/**
 * Function to test if number is probable prime according to FIPS186-5.
 * Differences with bailliePSW:
 * - non-deterministic
 * - multiple rounds of Miller-Rabin tests (with different bases)
 * @param n - number to test
 * @param iters - iteration count (how much random bases to test)
 */
export declare function isProbablePrime(n: bigint, iters: number, randFn?: RandFn): boolean;
export declare function isProbablePrimeRSA(n: bigint, randFn?: RandFn): boolean;
/**
 * Function to test if number is a probable safe prime.
 * A safe prime is of the form p = 2q + 1 where both p and q are prime.
 * @param p - number to test
 * @param iters - iteration count (how much random bases to test)
 * @param randFn - function to generate random bytes
 * @returns true if p is a probable safe prime, false otherwise
 */
export declare function isProbablySafePrime(p: bigint, iters: number, randFn?: RandFn): boolean;
//# sourceMappingURL=primality.d.ts.map